boot_camp ( RestTemplate Post 방식 )





이전까지는 getForEntity 로 get 방식 요청을 queryParam 형태로 

다른 서버에 요청을 보내 Entity 를 받아오는 방식을 했다.

* Post 방식 *

pathVariable 방식을 만들어보자.


public ItemDto postCall(String query) {

    URI uri = UriComponentsBuilder
            .fromUriString("http://localhost:7070")
            .path("/api/server/post-call/{query}")
            .encode()
            .build()
            .expand(query)
            .toUri();
    log.info("uri = " + uri);

    User user = new User("Robbie", "1234");

    ResponseEntity<ItemDto> responseEntity = restTemplate.postForEntity(uri, user, ItemDto.class);

    log.info("statusCode = " + responseEntity.getStatusCode());

    return responseEntity.getBody();
}

	- 중괄호 {} 를 통해 PathVariable 방식으로도 구현 가능하다.

	- expand(query) 를 통해 pathVariable 값을 주는 방식

	- postForEntity(uri, user, ItemDto.class)
		
		- 1번째 파라미터 : 요청할 서버에 대한 Url 정보

		- 2번째 파라미터 : http Body 로 넣어줄 데이터 ( 객체 자동으로 직렬화 )

		- 3번째 파라미터 : 응답 받을 데이터와 매핑할 객체 타입 ( 객체 자동으로 역직렬화 )




* RestTemplate exchangeCall *


다른 서버로 API 요청시 Header 에 데이터를 넣어 요청하고 싶을 경우!

Step

1. Url 객체 기존 방식을 참고해 원하는 형태로 만들어준다.

2. RequestEntity 객체의 메서드
	
	- post(uri) : uri 정보를 바탕으로 post 요청으로 지정

	- header(key, value) : 헤더 정보를 추가

	- body(user) : 요청을 할 때, 보낼 http Body 부분을 첨가 

		-  body 에 넣은 인자의 타입에 따라 RequestEntity<타입> 결정

3. restTemplate.exchange(requestEntity, String.class) 

	- 1번째 파라미터 : 요청에 대한 정보인, ResponseEntity 객체를 넣어준다. 

	- 2번째 파라미터 : 응답 받을 데이터와 매핑할 객체 타입



중요:

- 다른 서버로 api 요청시 Url 객체와 RequestEntity 정보 올바르게 구성

- get, postForEntity , exchange method 를 활용해서 여러 방식으로 보낼 수 있다. 
