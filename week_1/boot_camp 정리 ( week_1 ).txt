boot_camp 정리 ( week_1 )



* gradle *

- 빌드 자동화 시스템

- 우리가 작성한 java code 를 설정에 맞게 자동으로 빌드

실행 가능한 결과물인 jar 파일로 생성




* build.gradle *

- groovy 언어로 작성된 gradle 스크립트 파일

- Library 들을 관리
	
- dependencies 에 주입받고자 하는 라이브러리를 입력하면 Maven Repo 인 외부 저장소로부터 다운로드

- External Libraries  파일에 외부로부터 다운로드 받은 Library 들이 저장되어 있음.



* Server *

사용자의 요청이 해당 서버에 정확히 도달하게 Ip주소로 요청 ( 위치주소 식별 )

주소 ( IP ) + 받는 사람 ( PORT ) : ex. localhost:8080 

- RESTFUL API : API 작동 방식에 조건을 부가하는 소프트웨어 아키텍처

REST 라는 아키텍처 지침을 지키는 API 




* WebServer VS WebApplicationServer(WAS) *

- WebServer: 

	- html 같은 문서를 사용자에게 전달 ( 정적인 컨텐츠 )

	- 동적인 컨텐츠를 보여줘야 할 때 WAS 에 요청

- WAS: 

	- Login 후 MyPage ( 동적인 컨텐츠 )

WAS ex: enginX , Apache ( 대부분 동 * 정적 컨텐츠 가능 ) , TomCat , Jboss

- apache tomcat 은 WebServer 와 WAS 를 합쳐 구현한 모듈이다.

	- client 의 요청에 따라 기능 사용.




* Spring framework *

- IoC/DI , AOP , PSA 핵심 기능 사용

위의 기능들을 사용하려면 xml 파일에 여러 기능들을 세팅해줘야 했다.

- SpringBoot 나오면서 xml 기반 버리고 Annotation 기반 기능을 적극 사용함으로서 간편하게 설정 자동화.

	- library 버전도 전부 자동으로 맞춰준다. ( 호환성 )

	- 내장 Apache Tomcat ( 로컬 서버 , springframework.boot starter-web lib )




* http *

- 데이터를 주고 받는 통신 규약

- header

	- meta data 를 추가로 보내서 서버에서 헤더 정보를 읽고 로직 처리

	- get method 제외 , PayLoad 를 보낼 수 있다. ( HTTP Body )




















https://teamsparta.notion.site/Spring-Master-1-a2cd0bc80a5b495c9efa9c035c0f81f0#3bf256a9ae89490d8e17c4fa15dc693c

